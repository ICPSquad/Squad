type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIndex = nat32;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type Template = 
 variant {
   Accessory: record {
                after_wear: text;
                before_wear: text;
                recipe: Recipe;
              };
   LegendaryAccessory: blob;
   Material: blob;
 };
type SubAccount = vec nat8;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Result_5 = 
 variant {
   err: text;
   ok: nat64;
 };
type Result_4 = 
 variant {
   err: CommonError__1;
   ok: AccountIdentifier__1;
 };
type Result_3 = 
 variant {
   err: CommonError;
   ok: Metadata;
 };
type Result_2 = 
 variant {
   err: text;
   ok: text;
 };
type Result_1 = 
 variant {
   err: Error;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type Recipe = vec text;
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type Inventory = vec AssetInventory;
type Hub = 
 service {
   _burn: (TokenIndex) -> (Result_5);
   addElements: (text, Template) -> (Result_2);
   airdrop: (AirdropObject) -> (Result);
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier__1) -> (Result_4) query;
   drawAccessory: (TokenIdentifier__1) -> ();
   extensions: () -> (vec Extension) query;
   getContractInfo: () -> (ContractInfo);
   getHisInventory: (principal) -> (Inventory) query;
   getInventory: () -> (Inventory) query;
   getMetadata: () -> (ContractMetadata) query;
   getMinter: () -> (vec principal) query;
   getOwnership: () ->
    (vec record {
           AccountIdentifier__1;
           vec TokenIndex;
         }) query;
   getRegistry: () -> (vec record {
                             TokenIndex;
                             AccountIdentifier__1;
                           }) query;
   http_request: (Request) -> (Response) query;
   init: (vec principal, ContractMetadata) -> ();
   init_cap: () -> (Result);
   metadata: (TokenIdentifier__1) -> (Result_3) query;
   mint: (text, AccountIdentifier__1) -> (Result_2);
   removeAccessory: (text, text) -> (Result);
   showAdmins: () -> (vec principal) query;
   showAssets: () -> (vec text) query;
   sizes: () -> (nat, nat) query;
   supply: () -> (nat) query;
   transfer: (TransferRequest) -> (TransferResponse);
   updateAccessories: () -> ();
   updateAdmins: (principal, bool) -> (Result_1);
   updateToken: () -> (TokenIndex);
   wallet_available: () -> (nat) query;
   wallet_receive: () -> ();
   wearAccessory: (text, text) -> (Result);
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Extension = text;
type Error = 
 variant {
   AssetNotFound;
   AssetTooHeavy;
   AuthorizedPrincipalLimitReached: nat;
   ErrorMinting;
   FailedToWrite: text;
   Immutable;
   InvalidRequest;
   NotFound;
   Unauthorized;
   invalidTransaction;
   unsupportedResponse;
 };
type ContractMetadata = 
 record {
   name: text;
   symbol: text;
 };
type ContractInfo = 
 record {
   authorized_users: vec principal;
   cycles: nat;
   heap_size: nat;
   max_live_size: nat;
   memory_size: nat;
   nft_payload_size: nat;
   total_minted: nat;
 };
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type BalanceResponse = 
 variant {
   err: CommonError;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type AssetInventoryType = 
 variant {
   Accessory;
   LegendaryAccessory;
   Material;
 };
type AssetInventory = 
 record {
   category: AssetInventoryType;
   name: text;
   token_identifier: text;
 };
type AirdropObject = 
 record {
   accessory1: opt text;
   accessory2: opt text;
   material: text;
   recipient: principal;
 };
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : () -> Hub
