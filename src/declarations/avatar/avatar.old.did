type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type UpdateCallsAggregatedData = vec nat64;
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier__1;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier__1;
 };
type TokenIndex = nat32;
type TokenIdentifier__2 = text;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type Time = int;
type Tag = text;
type SubAccount = vec nat8;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Slots__1 = 
 record {
   Body: opt text;
   Eyes: opt text;
   Face: opt text;
   Hat: opt text;
   Misc: opt text;
 };
type Slots = 
 record {
   Body: opt text;
   Eyes: opt text;
   Face: opt text;
   Hat: opt text;
   Misc: opt text;
 };
type Result_9 = 
 variant {
   err: text;
   ok: text;
 };
type Result_8 = 
 variant {
   err: CommonError;
   ok: AccountIdentifier__1;
 };
type Result_7 = 
 variant {
   err: CommonError;
   ok: record {
         AccountIdentifier__1;
         opt Listing;
       };
 };
type Result_6 = 
 variant {
   err: text;
   ok: AvatarPreview;
 };
type Result_5 = 
 variant {
   err: text;
   ok: AvatarPreviewNew;
 };
type Result_4 = 
 variant {
   err: CommonError__1;
   ok: Metadata;
 };
type Result_3 = 
 variant {
   err: text;
   ok: AvatarInformations;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: vec record {
             TokenIndex;
             opt Listing;
             opt blob;
           };
 };
type Result_1 = 
 variant {
   err: CommonError;
   ok: vec TokenIndex;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type Nanos = nat64;
type MintRequest = 
 record {
   metadata: AvatarRequest;
   to: User;
 };
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Meta = 
 record {
   category: Category;
   description: text;
   name: text;
   tags: vec Tag;
 };
type Memo = blob;
type LogMessagesData = 
 record {
   message: text;
   timeNanos: Nanos;
 };
type Listing = 
 record {
   locked: opt Time;
   price: nat64;
   seller: principal;
   subaccount: opt SubAccount;
 };
type LayerId = nat;
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type GetLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   fromTimeNanos: opt Nanos;
 };
type GetLogMessagesFilter = 
 record {
   analyzeCount: nat32;
   messageContains: opt text;
   messageRegex: opt text;
 };
type GetLatestLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   upToTimeNanos: opt Nanos;
 };
type Extension = text;
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type Component__1 = 
 record {
   category: ComponentCategory;
   layers: vec nat;
   name: text;
 };
type ComponentRequest = 
 record {
   layer: nat8;
   name: text;
 };
type ComponentCategory = 
 variant {
   Accessory;
   Avatar;
   Other;
 };
type Component = 
 record {
   content: text;
   layer: nat8;
   name: text;
 };
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier__1;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier__1;
   Other: text;
 };
type Color = 
 record {
   nat8;
   nat8;
   nat8;
   nat8;
 };
type Category = 
 variant {
   AccessoryComponent;
   AvatarComponent;
   LegendaryCharacter;
 };
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterLogResponse = 
 variant {
   messages: CanisterLogMessages;
   messagesInfo: CanisterLogMessagesInfo;
 };
type CanisterLogRequest = 
 variant {
   getLatestMessages: GetLatestLogMessagesParameters;
   getMessages: GetLogMessagesParameters;
   getMessagesInfo;
 };
type CanisterLogMessagesInfo = 
 record {
   count: nat32;
   features: vec opt CanisterLogFeature;
   firstTimeNanos: opt Nanos;
   lastTimeNanos: opt Nanos;
 };
type CanisterLogMessages = 
 record {
   data: vec LogMessagesData;
   lastAnalyzedMessageTimeNanos: opt Nanos;
 };
type CanisterLogFeature = 
 variant {
   filterMessageByContains;
   filterMessageByRegex;
 };
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier__1;
   user: User;
 };
type Balance = nat;
type AvatarRequest = 
 record {
   colors: vec record {
                 color: Color;
                 spot: text;
               };
   components: vec ComponentRequest;
 };
type AvatarPreviewNew = 
 record {
   body_name: text;
   layers: vec record {
                 LayerId;
                 text;
               };
   slots: Slots;
   style: text;
   token_identifier: TokenIdentifier;
 };
type AvatarPreview = 
 record {
   avatar_svg: text;
   slots: Slots__1;
   token_identifier: TokenIdentifier__2;
 };
type AvatarInformations = 
 record {
   svg: text;
   tokenIdentifier: text;
 };
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
type Accessory = 
 record {
   content: text;
   layer: nat8;
   name: text;
   slot: text;
 };
service : {
  acceptCycles: () -> ();
  addAccessory: (text, Accessory) -> (Result_9);
  addComponent_new: (text, Component__1) -> (Result);
  addListAccessory: (vec Accessory) -> (Result_9);
  addListComponent: (vec record {
                           text;
                           Component;
                         }) -> (Result_9);
  add_admin: (principal) -> ();
  availableCycles: () -> (nat) query;
  balance: (BalanceRequest) -> (BalanceResponse) query;
  balance_new: (BalanceRequest) -> (BalanceResponse) query;
  bearer: (TokenIdentifier) -> (Result_8) query;
  bearer_new: (TokenIdentifier) -> (Result_8) query;
  changeCSS: (text) -> ();
  collectCanisterMetrics: () -> ();
  copy: () -> ();
  details: (TokenIdentifier) -> (Result_7) query;
  details_new: (TokenIdentifier) -> (Result_7) query;
  draw: (TokenIdentifier) -> (Result);
  eventsSize: () -> (nat) query;
  extensions: () -> (vec Extension) query;
  getAllAccessories: () -> (vec record {
                                  text;
                                  Accessory;
                                }) query;
  getAllComponents: () -> (vec record {
                                 text;
                                 Component;
                               }) query;
  getAvatarInfos: () -> (Result_6) query;
  getAvatarInfos_new: () -> (Result_5) query;
  getCanisterLog: (opt CanisterLogRequest) -> (opt CanisterLogResponse) query;
  getCanisterMetrics: (GetMetricsParameters) -> (opt CanisterMetrics) query;
  getRegistry: () -> (vec record {
                            TokenIndex;
                            AccountIdentifier__1;
                          }) query;
  getRegistry_new: () ->
   (vec record {
          TokenIndex;
          AccountIdentifier__1;
        }) query;
  getTokens: () -> (vec record {
                          TokenIndex;
                          Metadata;
                        }) query;
  getTokens_new: () -> (vec record {
                              TokenIndex;
                              Metadata;
                            }) query;
  http_request: (Request) -> (Response) query;
  init_cap: () -> (Result);
  is_admin: (principal) -> (bool) query;
  metadata: (TokenIdentifier) -> (Result_4) query;
  mint: (MintRequest) -> (Result_3);
  modify_style: (text) -> (text);
  removeAccessory: (TokenIdentifier, text, principal) -> (Result);
  showFullSvg: (TokenIdentifier) -> (opt text) query;
  test: () -> ();
  test_hex: () -> (vec AccountIdentifier__1);
  tokens: (AccountIdentifier__1) -> (Result_1) query;
  tokens_ext: (AccountIdentifier__1) -> (Result_2) query;
  tokens_ext_new: (AccountIdentifier__1) -> (Result_2) query;
  tokens_new: (AccountIdentifier__1) -> (Result_1) query;
  transfer: (TransferRequest) -> (TransferResponse);
  upload: (vec nat8) -> ();
  uploadClear: () -> ();
  uploadFinalize: (text, Meta, text) -> (Result);
  verificationEvents: () -> ();
  wearAccessory: (TokenIdentifier, text, principal) -> (Result);
}
