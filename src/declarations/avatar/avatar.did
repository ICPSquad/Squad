type erc721_token = 
 service {
   acceptCycles: () -> ();
   addAdmin: (principal) -> (Result);
   addLegendary: (text, text) -> (Result_3);
   addListAccessory: (vec Accessory) -> (Result_3);
   addListComponent: (vec record {
                            text;
                            Component;
                          }) -> (Result_3);
   allPayments: () -> (vec record {
                             principal;
                             vec SubAccount__1;
                           }) query;
   allSettlements: () -> (vec record {
                                TokenIndex;
                                Settlement;
                              }) query;
   availableCycles: () -> (nat) query;
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier) -> (Result_6) query;
   clearPayments: (principal, vec SubAccount__1) -> ();
   collectCanisterMetrics: () -> ();
   details: (TokenIdentifier) -> (Result_9) query;
   draw: (TokenIdentifier) -> (Result);
   eventsSize: () -> (nat) query;
   extensions: () -> (vec Extension) query;
   getAllAccessories: () -> (vec record {
                                   text;
                                   Accessory;
                                 }) query;
   getAllComponents: () -> (vec record {
                                  text;
                                  Component;
                                }) query;
   getAvatarInfos: () -> (Result_8) query;
   getAvatarInfos_new: () -> (Result_7) query;
   getCanisterMetrics: (GetMetricsParameters) -> (opt CanisterMetrics) query;
   getMinter: () -> (vec principal) query;
   getRegistry: () -> (vec record {
                             TokenIndex;
                             AccountIdentifier;
                           }) query;
   getTokens: () -> (vec record {
                           TokenIndex;
                           Metadata__1;
                         }) query;
   howManyEquipped: () -> (nat) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   init_cap: () -> (Result);
   list: (ListRequest) -> (Result_2);
   listings: () -> (vec record {
                          TokenIndex;
                          Listing;
                          Metadata__1;
                        }) query;
   lock: (TokenIdentifier, nat64, AccountIdentifier, SubAccount__1) ->
    (Result_6);
   metadata: (TokenIdentifier) -> (Result_5) query;
   mint: (MintRequest) -> (Result_4);
   mintLegendary: (text, AccountIdentifier) -> (Result_3);
   modify_style: (text) -> (text);
   payments: () -> (opt vec SubAccount__1) query;
   removeAccessory: (TokenIdentifier, text, principal) -> (Result);
   removeMouth: (TokenIdentifier) -> (Result);
   reset: () -> (nat);
   reset_data: () -> (vec record {
                            TokenIdentifier;
                            text;
                          }) query;
   saveAccessories: () -> (nat, nat);
   settle: (TokenIdentifier) -> (Result_2);
   settlements: () ->
    (vec record {
           TokenIndex;
           AccountIdentifier;
           nat64;
         }) query;
   showFullSvg: (TokenIdentifier) -> (opt text) query;
   showSvg: (TokenIdentifier) -> (opt text) query;
   stats: () -> (nat64, nat64, nat64, nat64, nat, nat, nat) query;
   supply: () -> (nat) query;
   tokenIdentifier: (TokenIndex) -> (TokenIdentifier) query;
   tokens: (AccountIdentifier) -> (Result_1) query;
   transactions: () -> (vec Transaction) query;
   transfer: (TransferRequest) -> (TransferResponse);
   transform_data: () -> (nat);
   transform_show: () -> (vec record {
                                AccountIdentifier;
                                text;
                              }) query;
   updateAdminsData: (principal, bool) -> (Result);
   verificationEvents: () -> ();
   wearAccessory: (TokenIdentifier, text, principal) -> (Result);
 };
type User = 
 variant {
   address: AccountIdentifier__1;
   "principal": principal;
 };
type UpdateCallsAggregatedData = vec nat64;
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier__1;
      InsufficientBalance;
      InvalidToken: TokenIdentifier__1;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier__1;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier__1;
 };
type Transaction = 
 record {
   buyer: AccountIdentifier__2;
   price: nat64;
   seller: principal;
   time: Time;
   token: TokenIdentifier__2;
 };
type TokenIndex = nat32;
type TokenIdentifier__3 = text;
type TokenIdentifier__2 = text;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type Time = int;
type SubAccount__2 = vec nat8;
type SubAccount__1 = vec nat8;
type SubAccount = vec nat8;
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Slots__1 = 
 record {
   Body: opt text;
   Eyes: opt text;
   Face: opt text;
   Hat: opt text;
   Misc: opt text;
 };
type Slots = 
 record {
   Body: opt text;
   Eyes: opt text;
   Face: opt text;
   Hat: opt text;
   Misc: opt text;
 };
type Settlement = 
 record {
   buyer: AccountIdentifier__2;
   price: nat64;
   seller: principal;
   subaccount: SubAccount__2;
 };
type Result_9 = 
 variant {
   err: CommonError;
   ok: record {
         AccountIdentifier;
         opt Listing;
       };
 };
type Result_8 = 
 variant {
   err: text;
   ok: AvatarPreview;
 };
type Result_7 = 
 variant {
   err: text;
   ok: AvatarPreviewNew;
 };
type Result_6 = 
 variant {
   err: CommonError;
   ok: AccountIdentifier;
 };
type Result_5 = 
 variant {
   err: CommonError__1;
   ok: Metadata;
 };
type Result_4 = 
 variant {
   err: text;
   ok: AvatarInformations;
 };
type Result_3 = 
 variant {
   err: text;
   ok: text;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok;
 };
type Result_1 = 
 variant {
   err: CommonError;
   ok: vec TokenIndex;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type MintRequest = 
 record {
   metadata: AvatarRequest;
   to: User;
 };
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type Metadata__1 = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type Listing = 
 record {
   locked: opt Time;
   price: nat64;
   seller: principal;
 };
type ListRequest = 
 record {
   from_subaccount: opt SubAccount__2;
   price: opt nat64;
   token: TokenIdentifier__2;
 };
type LayerId = nat;
type HttpStreamingStrategy = variant {
                               Callback:
                                record {
                                  callback: StreamingCallback;
                                  token: StreamingCallbackToken;
                                };};
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt HttpStreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type Extension = text;
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type ComponentRequest = 
 record {
   layer: nat8;
   name: text;
 };
type Component = 
 record {
   content: text;
   layer: nat8;
   name: text;
 };
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier__1;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier__1;
   Other: text;
 };
type Color = 
 record {
   nat8;
   nat8;
   nat8;
   nat8;
 };
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier__1;
   user: User;
 };
type Balance = nat;
type AvatarRequest = 
 record {
   colors: vec record {
                 color: Color;
                 spot: text;
               };
   components: vec ComponentRequest;
 };
type AvatarPreviewNew = 
 record {
   body_name: text;
   layers: vec record {
                 LayerId;
                 text;
               };
   slots: Slots;
   style: text;
   token_identifier: TokenIdentifier;
 };
type AvatarPreview = 
 record {
   avatar_svg: text;
   slots: Slots__1;
   token_identifier: TokenIdentifier__3;
 };
type AvatarInformations = 
 record {
   svg: text;
   tokenIdentifier: text;
 };
type AccountIdentifier__2 = text;
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
type Accessory = 
 record {
   content: text;
   layer: nat8;
   name: text;
   slot: text;
 };
service : () -> erc721_token
