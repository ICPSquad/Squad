type Accessory/1 = Accessory;
type AccountIdentifier/3 = AccountIdentifier/2;
type Component/1 = Component;
type IndefiniteEvent/1 = IndefiniteEvent;
type LayerAvatar/1 = LayerAvatar;
type LayerId/1 = LayerId;
type Listing/1 = Listing;
type Settlement/1 = Settlement;
type Slots/1 = Slots;
type SubAccount/3 = SubAccount/2;
type Time/2 = Time;
type TokenIdentifier/3 = TokenIdentifier/2;
type TokenIndex/1 = TokenIndex;
type Transaction/1 = Transaction;
type UpgradeData/1 = UpgradeData;
actor {
  stable var _blobsEntries : [(TokenIdentifier/3, Blob)];
  stable var _canistergeekMonitorUD : ?UpgradeData/1;
  stable var _eventsEntries : [(Time/2, IndefiniteEvent/1)];
  stable var _minter : [Principal];
  stable var _nextTokenId : Nat32;
  stable var _paymentsState : [(Principal, [SubAccount/3])];
  stable var _principalToAccountsIdentifierState :
    [(Principal, [AccountIdentifier/3])];
  stable var _refundsState : [(Principal, [SubAccount/3])];
  stable var _registryState : [(TokenIndex/1, AccountIdentifier/3)];
  stable var _supply : Nat;
  stable var _tokenListingState : [(TokenIndex/1, Listing/1)];
  stable var _tokenSettlementState : [(TokenIndex/1, Settlement/1)];
  stable var _transactions : [Transaction/1];
  stable var _usedPaymentAddressess :
    [(AccountIdentifier/3, Principal, SubAccount/3)];
  stable var accessoriesEntries : [(Text, Accessory/1)];
  stable var adminsData : [Principal];
  stable var componentsEntries : [(Text, Component/1)];
  stable var count : Nat;
  stable var layerStorage : [[(LayerId/1, LayerAvatar/1)]];
  stable var legendaryEntries : [(Text, Text)];
  stable var slotsStorage : [Slots/1];
  stable var storageData : [(TokenIdentifier/3, Text)];
  stable var storageOwner : [(AccountIdentifier/3, Text)];
  stable var styleStorage : [Text];
  stable var style_to_add : Text;
  stable var tokenStorage : [TokenIdentifier/3];
  stable var version : Nat
};
