type User = 
 record {
   airdrop: opt vec text;
   avatar: opt TokenIdentifier;
   discord: opt text;
   email: opt text;
   height: opt nat64;
   rank: opt nat64;
   status: Status;
   twitter: opt text;
   wallet: text;
 };
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: BlockIndex;
 };
type TransferError = 
 variant {
   BadFee: record {expected_fee: ICP;};
   InsufficientFunds: record {balance: ICP;};
   TxCreatedInFuture;
   TxDuplicate: record {duplicate_of: BlockIndex;};
   TxTooOld: record {allowed_window_nanos: nat64;};
 };
type TokenIdentifier = text;
type Time = int;
type SubAccount = vec nat8;
type Status = 
 variant {
   Legendary;
   Level1;
   Level2;
   Level3;
   OG;
   Staff;
 };
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat64;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type PaymentError = 
 record {
   caller: principal;
   error_message: text;
   request_associated: opt Infos__1;
 };
type MintingError = 
 variant {
   Avatar: text;
   Verification: text;
 };
type MintRequest = 
 record {
   metadata: AvatarRequest;
   to: ExtCoreUser;
 };
type Infos__1 = 
 record {
   discord: opt text;
   email: opt text;
   memo: nat64;
   subaccount_to_send: vec nat8;
   twitter: opt text;
   wallet: text;
 };
type Infos = 
 record {
   discord: opt text;
   email: opt text;
   memo: nat64;
   subaccount_to_send: vec nat8;
   twitter: opt text;
   wallet: text;
 };
type ICP = record {e8s: nat64;};
type ExtCoreUser = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type Color = 
 record {
   nat8;
   nat8;
   nat8;
   nat8;
 };
type BlockIndex = nat64;
type AvatarResponse = 
 variant {
   err: text;
   ok: AvatarInformations;
 };
type AvatarRequest = 
 record {
   colors: vec record {
                 color: Color;
                 spot: text;
               };
   components: vec record {
                     layer: nat8;
                     name: text;
                   };
 };
type AvatarInformations = 
 record {
   svg: text;
   tokenIdentifier: text;
 };
type Audit = 
 record {
   cycles_burned_accessories: int;
   cycles_burned_avatar: int;
   cycles_burned_hub: int;
   new_avatar: int;
   new_icps: ICP;
   new_items: int;
   new_users: int;
   time: int;
 };
type AirdropResponse = 
 variant {
   err: text;
   ok: AirdropObject;
 };
type AirdropObject = 
 record {
   accessory1: opt text;
   accessory2: opt text;
   material: text;
   recipient: principal;
 };
type AccountIdentifier = text;
service : {
  addAdmin: (principal) -> (Result_2);
  addUser: (principal, User) -> (Result_2);
  airdrop: () -> (AirdropResponse);
  audit: () -> ();
  balance: () -> (ICP);
  checkRegistration: () -> (bool) query;
  confirm: (nat64) -> (Result_2);
  getInformations: () -> (vec record {
                                principal;
                                User;
                              });
  getRank: (principal) -> (opt nat) query;
  isUserAuthorized: () -> (Result_2) query;
  mintRequest: (MintRequest) -> (AvatarResponse);
  modifyUser: (principal, User) -> (Result_2);
  numberUsers: () -> (nat) query;
  prejoin: (text, opt text, opt text, opt text, SubAccount) -> (Result_1);
  process: () -> ();
  recipe: () -> ();
  removeUser: (principal) -> (Result);
  showErrors: () -> (vec record {
                           Time;
                           MintingError;
                         }) query;
  showPaymentErrors: () -> (vec record {
                                  Time;
                                  PaymentError;
                                }) query;
  showPrejoins: () -> (vec record {
                             principal;
                             Infos;
                           }) query;
  showUser: (principal) -> (opt User) query;
  show_audits: () -> (vec Audit) query;
  transfer: (ICP, principal) -> (TransferResult);
  verification: () -> ();
  wallet_available: () -> (nat) query;
  wallet_receive: () -> ();
}
