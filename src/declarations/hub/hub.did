type UpdateCallsAggregatedData = vec nat64;
type TokenVerbose = 
 record {
   decimals: int;
   meta: opt record {Issuer: text;};
   symbol: text;
 };
type Time = int;
type Permissions = 
 record {
   canGet: vec principal;
   canVerify: vec principal;
 };
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type Nanos = nat64;
type MintSuccess = record {tokenId: text;};
type MintResult = 
 variant {
   err: MintErr;
   ok: MintSuccess;
 };
type MintInformation = 
 record {
   background: text;
   cloth: text;
   colors: Colors;
   ears: text;
   eyes: text;
   hair: text;
   mouth: text;
   nose: text;
   profile: text;
 };
type MintErr = 
 variant {
   AlreadyMinted;
   Anonymous;
   AvatarCanisterErr: text;
   Invoice: Invoice;
   InvoiceCanisterErr:
    record {
      kind:
       variant {
         BadSize;
         Expired;
         InvalidAccount;
         InvalidAmount;
         InvalidDestination;
         InvalidDetails;
         InvalidInvoiceId;
         InvalidToken;
         MaxInvoicesReached;
         NotAuthorized;
         NotFound;
         NotYetPaid;
         Other;
         TransferError;
       };
      message: opt text;
    };
   Other: text;
 };
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type LogMessagesData = 
 record {
   message: text;
   timeNanos: Nanos;
 };
type Invoice = 
 record {
   amount: nat;
   amountPaid: nat;
   creator: principal;
   destination: AccountIdentifier;
   details: opt Details;
   expiration: Time;
   id: nat;
   paid: bool;
   permissions: opt Permissions;
   token: TokenVerbose;
   verifiedAtTime: opt Time;
 };
type ICPSquadHub = 
 service {
   acceptCycles: () -> ();
   add_admin: (principal) -> ();
   availableCycles: () -> (nat) query;
   collectCanisterMetrics: () -> ();
   getCanisterLog: (opt CanisterLogRequest) ->
    (opt CanisterLogResponse) query;
   getCanisterMetrics: (GetMetricsParameters) -> (opt CanisterMetrics) query;
   is_admin: (principal) -> (bool) query;
   mint: (MintInformation) -> (MintResult);
   size: () -> (nat) query;
 };
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type GetLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   fromTimeNanos: opt Nanos;
 };
type GetLogMessagesFilter = 
 record {
   analyzeCount: nat32;
   messageContains: opt text;
   messageRegex: opt text;
 };
type GetLatestLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   upToTimeNanos: opt Nanos;
 };
type Details = 
 record {
   description: text;
   meta: blob;
 };
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type Colors = 
 vec record {
       color: Color;
       spot: text;
     };
type Color = 
 record {
   nat8;
   nat8;
   nat8;
   nat8;
 };
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterLogResponse = 
 variant {
   messages: CanisterLogMessages;
   messagesInfo: CanisterLogMessagesInfo;
 };
type CanisterLogRequest = 
 variant {
   getLatestMessages: GetLatestLogMessagesParameters;
   getMessages: GetLogMessagesParameters;
   getMessagesInfo;
 };
type CanisterLogMessagesInfo = 
 record {
   count: nat32;
   features: vec opt CanisterLogFeature;
   firstTimeNanos: opt Nanos;
   lastTimeNanos: opt Nanos;
 };
type CanisterLogMessages = 
 record {
   data: vec LogMessagesData;
   lastAnalyzedMessageTimeNanos: opt Nanos;
 };
type CanisterLogFeature = 
 variant {
   filterMessageByContains;
   filterMessageByRegex;
 };
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
type AccountIdentifier = 
 variant {
   "blob": blob;
   "principal": principal;
   "text": text;
 };
service : (principal, principal, principal) -> ICPSquadHub
